@misc{bostock:2021,
	title = {10 {Years} of {Open}-{Source} {Visualization} / {Mike} {Bostock} / {Observable}},
  author = {Mike Bostock},
	url = {https://observablehq.com/@mbostock/10-years-of-open-source-visualization},
	urldate = {2021-12-08},
	file = {10 Years of Open-Source Visualization / Mike Bostock / Observable:/Users/parkie-doo/Zotero/storage/4L8GXH38/10-years-of-open-source-visualization.html:text/html},
}

@misc{bostock:2013,
  title = {Eyeo 2013 - {Mike} {Bostock}},
  author = {Mike Bostock},
	url = {https://vimeo.com/69448223},
	abstract = {For Example \&ndash;  Sharing code examples is a powerful way to teach and inspire; D3\&rsquo;s hundreds of examples undoubtedly contributed to its success. Mike describe\&\#039;s\&hellip;},
	urldate = {2021-12-08},
	month = jul,
	year = {2013},
	keywords = {\#datastories, \#datavisualization, \#dataviz, \#eyeo, \#eyeo2013, \#eyeofestival, \#infographics},
	file = {Snapshot:/Users/parkie-doo/Zotero/storage/EHJUYAGM/69448223.html:text/html},
}


@misc{observable_plot_docs:2021,
	title = {Observable {Plot} / {Observable} / {Observable}},
	url = {https://observablehq.com/@observablehq/plot},
	urldate = {2021-12-08},
	file = {Observable Plot / Observable / Observable:/Users/parkie-doo/Zotero/storage/T7FTRWPJ/plot.html:text/html},
}


@misc{observable_plot:2021,
	title = {Observable {Plot}},
	copyright = {ISC},
	url = {https://github.com/observablehq/plot},
	abstract = {A concise API for exploratory data visualization},
	urldate = {2021-12-08},
	publisher = {Observable},
	month = dec,
	year = {2021},
	note = {original-date: 2020-10-29T22:30:31Z},
	keywords = {charts, data-visualization, visualization},
}


@article{wang_etal:2019,
	title = {Visualization by example},
	volume = {4},
	url = {https://doi.org/10.1145/3371117},
	doi = {10.1145/3371117},
	abstract = {While visualizations play a crucial role in gaining insights from data, generating useful visualizations from a complex dataset is far from an easy task. In particular, besides understanding the functionality provided by existing visualization libraries, generating the desired visualization also requires reshaping and aggregating the underlying data as well as composing different visual elements to achieve the intended visual narrative. This paper aims to simplify visualization tasks by automatically synthesizing the required program from simple visual sketches provided by the user. Specifically, given an input data set and a visual sketch that demonstrates how to visualize a very small subset of this data, our technique automatically generates a program that can be used to visualize the entire data set. From a program synthesis perspective, automating visualization tasks poses several challenges that are not addressed by prior techniques. First, because many visualization tasks require data wrangling in addition to generating plots from a given table, we need to decompose the end-to-end synthesis task into two separate sub-problems. Second, because the intermediate specification that results from the decomposition is necessarily imprecise, this makes the data wrangling task particularly challenging in our context. In this paper, we address these problems by developing a new compositional visualization-by-example technique that (a) decomposes the end-to-end task into two different synthesis problems over different DSLs and (b) leverages bi-directional program analysis to deal with the complexity that arises from having an imprecise intermediate specification. We have implemented our visualization-by-example approach in a tool called Viser and evaluate it on over 80 visualization tasks collected from on-line forums and tutorials. Viser can solve 84 of these benchmarks within a 600 second time limit, and, for those tasks that can be solved, the desired visualization is among the top-5 generated by Viser in 70\% of the cases.},
	number = {POPL},
	urldate = {2021-10-06},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Wang, Chenglong and Feng, Yu and Bodik, Rastislav and Cheung, Alvin and Dillig, Isil},
	month = dec,
	year = {2019},
	keywords = {Data Visualization, Program Synthesis},
	pages = {49:1--49:28},
	file = {Full Text PDF:/Users/parkie-doo/Zotero/storage/6IIQMPQC/Wang et al. - 2019 - Visualization by example.pdf:application/pdf},
}

@article{poco_heer:2017,
	title = {Reverse-{Engineering} {Visualizations}: {Recovering} {Visual} {Encodings} from {Chart} {Images}},
	volume = {36},
	issn = {0167-7055},
	shorttitle = {Reverse-{Engineering} {Visualizations}},
	url = {https://doi.org/10.1111/cgf.13193},
	doi = {10.1111/cgf.13193},
	abstract = {We investigate how to automatically recover visual encodings from a chart image, primarily using inferred text elements. We contribute an end-to-end pipeline which takes a bitmap image as input and returns a visual encoding specification as output. We present a text analysis pipeline which detects text elements in a chart, classifies their role e.g., chart title, x-axis label, y-axis title, etc., and recovers the text content using optical character recognition. We also train a Convolutional Neural Network for mark type classification. Using the identified text elements and graphical mark type, we can then infer the encoding specification of an input chart image. We evaluate our techniques on three chart corpora: a set of automatically labeled charts generated using Vega, charts from the Quartz news website, and charts extracted from academic papers. We demonstrate accurate automatic inference of text elements, mark types, and chart specifications across a variety of input chart types.},
	number = {3},
	urldate = {2021-10-20},
	journal = {Computer Graphics Forum},
	author = {Poco, Jorge and Heer, Jeffrey},
	month = jun,
	year = {2017},
	pages = {353--363},
}

@misc{typescript:2021,
	title = {{JavaScript} {With} {Syntax} {For} {Types}.},
	url = {https://www.typescriptlang.org/},
	abstract = {TypeScript extends JavaScript by adding types to the language. TypeScript speeds up your development experience by catching errors and providing fixes before you even run your code.},
	language = {en},
	urldate = {2021-12-09},
	file = {Snapshot:/Users/parkie-doo/Zotero/storage/VGKQ9AEN/www.typescriptlang.org.html:text/html},
}

@book{wilkinson:2005,
  author = {Wilkinson, Leland},
  title = {The Grammar of Graphics (Statistics and Computing)},
  year = {2005},
  isbn = {0387245448},
  publisher = {Springer-Verlag},
  address = {Berlin, Heidelberg}
}


@misc{vega-lite:2021,
	title = {A {High}-{Level} {Grammar} of {Interactive} {Graphics}},
	url = {https://vega.github.io/vega-lite/},
	abstract = {Vega-Lite - a high-level grammar for statistical graphics. Vega-Lite provides a higher-level grammar for visual analysis, comparable to ggplot or Tableau, that generates complete Vega specifications. Vega-Lite specifications consist of simple mappings of variables in a data set to visual encoding channels such as x, y, color, and size. These mappings are then translated into detailed visualization specifications in the form of Vega specification language. Vega-Lite produces default values for visualization components (e.g., scales, axes, and legends) in the output Vega specification using a rule-based approach, but users can explicit specify these properties to override default values.},
	urldate = {2021-12-10},
	journal = {Vega-Lite},
	file = {Snapshot:/Users/parkie-doo/Zotero/storage/BAIM6G9S/vega-lite.html:text/html},
}

@article{ivory_nyt:2021,
	chapter = {U.S.},
	title = {Least {Vaccinated} {U}.{S}. {Counties} {Have} {Something} in {Common}: {Trump} {Voters}},
	issn = {0362-4331},
	shorttitle = {Least {Vaccinated} {U}.{S}. {Counties} {Have} {Something} in {Common}},
	url = {https://www.nytimes.com/interactive/2021/04/17/us/vaccine-hesitancy-politics.html},
	abstract = {A Times analysis found that willingness to receive a vaccine and actual vaccination rates to date were both lower, on average, in counties that voted red in the 2020 presidential election.},
	language = {en-US},
	urldate = {2021-12-10},
	journal = {The New York Times},
	author = {Ivory, Danielle and Leatherby, Lauren and Gebeloff, Robert},
	month = apr,
	year = {2021},
	keywords = {Coronavirus (2019-nCoV), Polls and Public Opinion, Republican Party, Rural Areas, Trump, Donald J, United States Politics and Government, Vaccination and Immunization},
	file = {Snapshot:/Users/parkie-doo/Zotero/storage/EAC55T6N/vaccine-hesitancy-politics.html:text/html},
}

@article{mcminn_npr:2020,
	chapter = {Coronavirus By The Numbers},
	title = {America's 200,000 {COVID}-19 {Deaths}: {Small} {Cities} {And} {Towns} {Bear} {A} {Growing} {Share}},
	shorttitle = {America's 200,000 {COVID}-19 {Deaths}},
	url = {https://www.npr.org/sections/health-shots/2020/09/22/914578634/americas-200-000-covid-19-deaths-small-cities-and-towns-bear-a-growing-share},
	abstract = {Early in the pandemic, most deaths occurred in large cities. But now, as COVID-19 spreads across the U.S., smaller communities are suffering many losses as well.},
	language = {en},
	urldate = {2021-12-10},
	journal = {NPR},
	author = {McMinn, Sean and Talbot, Ruth and Eng, Jess},
	month = sep,
	year = {2020},
	file = {Snapshot:/Users/parkie-doo/Zotero/storage/ZR5KJIHU/americas-200-000-covid-19-deaths-small-cities-and-towns-bear-a-growing-share.html:text/html},
}


@misc{bostock_dotplot:2018,
	title = {Dot {Plot} / {D3} / {Observable}},
	author = {Mike Bostock},
	url = {https://observablehq.com/@d3/dot-plot},
	urldate = {2021-12-10},
	file = {Dot Plot / D3 / Observable:/Users/parkie-doo/Zotero/storage/H9LFC4E4/dot-plot.html:text/html},
}


@inproceedings{jung_etal:2017,
	address = {New York, NY, USA},
	series = {{CHI} '17},
	title = {{ChartSense}: {Interactive} {Data} {Extraction} from {Chart} {Images}},
	isbn = {978-1-4503-4655-9},
	shorttitle = {{ChartSense}},
	url = {http://doi.org/10.1145/3025453.3025957},
	doi = {10.1145/3025453.3025957},
	abstract = {Charts are commonly used to present data in digital documents such as web pages, research papers, or presentation slides. When the underlying data is not available, it is necessary to extract the data from a chart image to utilize the data for further analysis or improve the chart for more accurate perception. In this paper, we present ChartSense, an interactive chart data extraction system. ChartSense first determines the chart type of a given chart image using a deep learning based classifier, and then extracts underlying data from the chart image using semi-automatic, interactive extraction algorithms optimized for each chart type. To evaluate chart type classification accuracy, we compared ChartSense with ReVision, a system with the state-of-the-art chart type classifier. We found that ChartSense was more accurate than ReVision. In addition, to evaluate data extraction performance, we conducted a user study, comparing ChartSense with WebPlotDigitizer, one of the most effective chart data extraction tools among publicly accessible ones. Our results showed that ChartSense was better than WebPlotDigitizer in terms of task completion time, error rate, and subjective preference.},
	urldate = {2021-12-11},
	booktitle = {Proceedings of the 2017 {CHI} {Conference} on {Human} {Factors} in {Computing} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Jung, Daekyoung and Kim, Wonjae and Song, Hyunjoo and Hwang, Jeong-in and Lee, Bongshin and Kim, Bohyoung and Seo, Jinwook},
	month = may,
	year = {2017},
	keywords = {chart classification, chart recognition, data extraction, deep learning, mixed-initiative interaction},
	pages = {6706--6717},
}

@inproceedings{savva_etal:2011,
	address = {New York, NY, USA},
	series = {{UIST} '11},
	title = {{ReVision}: automated classification, analysis and redesign of chart images},
	isbn = {978-1-4503-0716-1},
	shorttitle = {{ReVision}},
	url = {http://doi.org/10.1145/2047196.2047247},
	doi = {10.1145/2047196.2047247},
	abstract = {Poorly designed charts are prevalent in reports, magazines, books and on the Web. Most of these charts are only available as bitmap images; without access to the underlying data it is prohibitively difficult for viewers to create more effective visual representations. In response we present ReVision, a system that automatically redesigns visualizations to improve graphical perception. Given a bitmap image of a chart as input, ReVision applies computer vision and machine learning techniques to identify the chart type (e.g., pie chart, bar chart, scatterplot, etc.). It then extracts the graphical marks and infers the underlying data. Using a corpus of images drawn from the web, ReVision achieves image classification accuracy of 96\% across ten chart categories. It also accurately extracts marks from 79\% of bar charts and 62\% of pie charts, and from these charts it successfully extracts data from 71\% of bar charts and 64\% of pie charts. ReVision then applies perceptually-based design principles to populate an interactive gallery of redesigned charts. With this interface, users can view alternative chart designs and retarget content to different visual styles.},
	urldate = {2021-12-11},
	booktitle = {Proceedings of the 24th annual {ACM} symposium on {User} interface software and technology},
	publisher = {Association for Computing Machinery},
	author = {Savva, Manolis and Kong, Nicholas and Chhajta, Arti and Fei-Fei, Li and Agrawala, Maneesh and Heer, Jeffrey},
	month = oct,
	year = {2011},
	keywords = {chart understanding, computer vision, information extraction, redesign, visualization},
	pages = {393--402},
}

@inproceedings{harper_agrawala:2014,
	address = {New York, NY, USA},
	series = {{UIST} '14},
	title = {Deconstructing and restyling {D3} visualizations},
	isbn = {978-1-4503-3069-5},
	url = {http://doi.org/10.1145/2642918.2647411},
	doi = {10.1145/2642918.2647411},
	abstract = {The D3 JavaScript library has become a ubiquitous tool for developing visualizations on the Web. Yet, once a D3 visualization is published online its visual style is difficult to change. We present a pair of tools for deconstructing and restyling existing D3 visualizations. Our deconstruction tool analyzes a D3 visualization to extract the data, the marks and the mappings between them. Our restyling tool lets users modify the visual attributes of the marks as well as the mappings from the data to these attributes. Together our tools allow users to easily modify D3 visualizations without examining the underlying code and we show how they can be used to deconstruct and restyle a variety of D3 visualizations.},
	urldate = {2021-12-11},
	booktitle = {Proceedings of the 27th annual {ACM} symposium on {User} interface software and technology},
	publisher = {Association for Computing Machinery},
	author = {Harper, Jonathan and Agrawala, Maneesh},
	month = oct,
	year = {2014},
	keywords = {chart understanding, D3, information extraction, redesign, restyling, visualization},
	pages = {253--262},
}


@misc{createTreeWalker_mozilla:2021,
	title = {Document.{createTreeWalker}() - {Web} {APIs} {\textbar} {MDN}},
	url = {https://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker},
	abstract = {The Document.createTreeWalker() creator method returns a newly created TreeWalker object.},
	language = {en-US},
	urldate = {2021-12-13},
	file = {Snapshot:/Users/parkie-doo/Zotero/storage/7G8QW6KI/createTreeWalker.html:text/html},
}
